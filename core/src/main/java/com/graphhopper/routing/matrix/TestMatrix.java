package com.graphhopper.routing.matrix;

import com.graphhopper.GHRequest;
import com.graphhopper.GHResponse;
import com.graphhopper.GraphHopper;
import com.graphhopper.GraphHopperConfig;
import com.graphhopper.config.CHProfile;
import com.graphhopper.config.Profile;
import com.graphhopper.util.Parameters;
import com.graphhopper.util.shapes.GHPoint;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.ThreadLocalRandom;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class TestMatrix {

    public static GHMatrixRequest parseRawMatrix(String rawMatrix) {
        String[] rawPoints = rawMatrix.split("&");
        Stream<GHPoint> sourceGHPoints = Arrays.stream(rawPoints).filter(p -> p.startsWith("s")).map(p -> {
            String[] latLong = p.replace("s=", "").split(",");
            return new GHPoint(Double.parseDouble(latLong[0]), Double.parseDouble(latLong[1]));
        });
        Stream<GHPoint> destGHPoints = Arrays.stream(rawPoints).filter(p -> p.startsWith("d")).map(p -> {
            String[] latLong = p.replace("d=", "").split(",");
            return new GHPoint(Double.parseDouble(latLong[0]), Double.parseDouble(latLong[1]));
        });

        GHMatrixRequest test = new GHMatrixRequest().setProfile("car");
        test.setDestinations(destGHPoints.collect(Collectors.toList()));
        test.setOrigins(sourceGHPoints.collect(Collectors.toList()));
        return test;
    }


    public static void main(String[] args) {

        String rawMatrix = "s=51.209419595047,-0.14968139920029974&s=51.331552038958996,-0.4248153616200463&s=51.39910201155384,-0.5097592508106653&s=51.736193181070036,-0.4550976482806249&s=51.64897325299254,0.3155192633188442&s=51.570778838753384,-0.3660332312600426&s=51.288444226994834,0.0051802108572506275&s=51.63323897379526,-0.27870229020322634&s=51.71291684513648,-0.21670168138734539&s=51.63924690150146,-0.5948002619012477&s=51.73412916004248,-0.4428113061562783&s=51.4960236351404,0.1406239810728467&s=51.30417429459595,-0.16846058217274967&s=51.40401886595975,0.2767282864274021&s=51.37656077556336,-0.20973927912499357&s=51.52859197638021,-0.13553400268729268&s=51.4291866749453,-0.33029345314725034&s=51.29113398258074,-0.3819403045713963&s=51.64171630381665,0.14476966905916733&s=51.739585631786056,-0.43950364030028194&s=51.59984554437903,-0.3124600734783261&s=51.510664498631584,-0.5640620670161409&s=51.56539124008535,-0.5851676118957678&s=51.423882605292135,-0.16320318933589412&s=51.52972810868806,-0.3369191243713483&s=51.56863962397899,0.1672223984336163&s=51.555242084419234,-0.07441196941147508&s=51.468700403739135,0.36569277854252374&s=51.65865116207192,0.2316173099636591&s=51.26643748464783,-0.45037477100165446&s=51.69468906103148,0.2718633246771819&s=51.32604883541386,-0.15525216649485668&s=51.269082123603056,0.2209989567075353&s=51.74663572852374,-0.1149595425124815&s=51.38154181104522,-0.38137772380819057&s=51.722946939638916,0.19033114594187547&s=51.47851522856566,0.04476687676472537&s=51.291697814779205,0.2526459985025394&s=51.420029835890055,-0.2999562377270815&s=51.59750615018522,0.041241554343207365&s=51.69105946051596,-0.2885963180949703&s=51.749935798119395,-0.040808492801298966&s=51.642071370203915,-0.3723824720238017&s=51.38446833122993,-0.5364502999501992&s=51.38639631702857,-0.2261837066197284&s=51.293861103586515,-0.3266507867140931&s=51.317202926551914,-0.00417622876745926&s=51.36401807530685,0.033200263202059155&s=51.47685159555028,0.007897158291694548&s=51.74504158764332,-0.4361954320311448&s=51.71264319533179,0.012892691417172536&s=51.38307382122676,-0.2953568228121035&s=51.7341752489065,0.021615007757103618&s=51.649890702580635,-0.43069971321406236&s=51.29862651108805,-0.28355092833542406&s=51.728893591535204,-0.4414725129149698&s=51.4430940206265,0.023163574650243636&s=51.51542387245954,-0.01790473539960596&s=51.33391891684995,-0.589049998581121&s=51.465904464138745,-0.11530973746833412&s=51.49916034749449,-0.19828620574469855&s=51.31302567938367,0.07816077370622271&s=51.628006133349025,0.19475206829066244&s=51.62667253971619,0.2253784596646449&s=51.42116799114996,0.3677461087259693&s=51.32558526966414,0.300146888226587&s=51.22651147797931,0.04349498502094279&s=51.50577853209629,0.003123366036420594&s=51.758753140091216,-0.08048279703613728&s=51.75942202215168,0.05516820998477392&s=51.54899299499268,-0.4870859590130626&s=51.52366358452055,-0.5697451450742617&s=51.24955531293137,-0.031765381316308364&s=51.62084886491379,0.21280602175385938&s=51.35797569587408,-0.1538445927492507&s=51.3846466324489,-0.15113454985933397&s=51.42186157938349,0.260837538443317&s=51.625979278478255,-0.43164722701264735&s=51.36688125865261,-0.3006340151381436&s=51.65971352155479,-0.22209227277125357&s=51.38267152863599,-0.35830171007797895&s=51.350504461420634,-0.4179274688869404&s=51.40297498749806,-0.09974044244455665&s=51.69246051914479,-0.4274658322999282&s=51.53252429774791,-0.3891419099044616&s=51.64490772882286,0.28155592907551&s=51.6617595304769,0.30545175293068916&s=51.53269158381598,-0.2183496528791393&s=51.34007095698546,-0.02605509392644901&s=51.42484449303928,-0.028251345859511695&s=51.38493723574598,-0.0882979886984312&s=51.56751926444901,0.20243446987522562&s=51.4445266462999,-0.5049530817572576&s=51.48081383606694,0.21642906089086159&s=51.68342774636164,-0.10857409889585262&s=51.611314327151,0.17549445944479602&s=51.49083234888207,-0.535528602974219&s=51.57535556619309,-0.03968534792077997&s=51.35359770257865,-0.13412501655223816&s=51.434161253192734,0.17888615760854695&d=51.22295699849439,0.08146723591615239&d=51.35893577367104,-0.35466156038466023&d=51.67934322636855,-0.5345809125863306&d=51.69536085274615,-0.13730814708158856&d=51.70533193946727,-0.2663924906928731&d=51.669682668021345,-0.2925816112994419&d=51.42757530651127,0.031619629159500465&d=51.52754541757021,-0.4370774041882908&d=51.57300109773908,0.2686261574097337&d=51.73587704622383,1.3330466027694637E-4&d=51.30097728162275,-0.0676205835360171&d=51.65997886519712,-0.33000204947000095&d=51.55091329761212,0.3716083697587998&d=51.45729825149546,-0.40754195661012&d=51.246684843703584,0.13600528809372944&d=51.509640381261214,-0.313133206934444&d=51.65907072536097,-0.23599014701707588&d=51.67686043482115,0.2248704943010427&d=51.464021889710196,-0.6459025579772733&d=51.667725172885746,-0.10466557172205226&d=51.440399284877074,-0.3728595828661896&d=51.359364941864555,0.2851116284840057&d=51.79264375036311,-0.09127076091255948&d=51.405749248142655,-0.039858791640676246&d=51.2020905628148,-0.13625502248266533&d=51.4894484022041,-0.2355809847579127&d=51.46175021327819,-0.6382790940939749&d=51.671145306666894,-0.5395272566284309&d=51.59884542341672,0.13189942107190805&d=51.35851937552114,0.14608067256719448&d=51.63897656550488,0.02170338155598898&d=51.76392968494713,-0.023200290379117115&d=51.705162420843415,-0.03673076546585409&d=51.30751070783313,-0.264793691744666&d=51.71585240919872,-0.2104042429185473&d=51.458593465949036,0.3147155233132341&d=51.54988899327484,-0.5764837686932373&d=51.58019686479616,-0.27940223437040895&d=51.6130086207213,-0.20101711279647108&d=51.20623992827333,-0.16051680460953321&d=51.491926334164084,0.0484729082491323&d=51.429464708625545,0.01486066309909305&d=51.48606496506649,0.03592903004511689&d=51.328959252240026,-0.26082412755493145&d=51.530259162840586,-0.5972572780898718&d=51.54390171912438,-0.6430436732040328&d=51.52801676018139,-0.4817314617423106&d=51.287097796680314,-0.08048503327088681&d=51.37940528931432,0.31973743600438814&d=51.3855800910888,-0.0744825014375636&d=51.44423667414475,0.16714814862104224&d=51.57286558584889,-0.6481805033428626&d=51.46210592368312,0.39743039012507586&d=51.56664807037809,-0.22918962318431693&d=51.473732797191474,-0.505377786577946&d=51.49735844325911,-0.12310802011293871&d=51.3320936274994,-0.026424393637033503&d=51.227696057556834,-0.15651892871226986&d=51.57003591698499,-0.3260193790564124&d=51.566080851198834,-0.46330178283400675&d=51.62350061083121,0.1515426623488714&d=51.429901890072514,-0.2043644239906715&d=51.215744749261155,-0.016530803058164924&d=51.33426157770635,-0.31578955418921034&d=51.35316314492082,-0.1433343396109842&d=51.54709377959415,0.15848135189625978&d=51.49109239868454,-0.08654936923349689&d=51.59872725896853,0.19020625628569424&d=51.23464796693875,-0.2326725034174866&d=51.48730529274351,0.4308804818052814&d=51.45808111293004,-0.28146901075388714&d=51.62276280525373,-0.2760635611825294&d=51.57996764651366,0.24599426013573836&d=51.27976350085307,-0.06705736890113506&d=51.63238487142354,-0.4637992717709418&d=51.587948563846766,-0.612123849470799&d=51.602136796371305,-0.32006793053019833&d=51.358930507044214,0.15526993614925358&d=51.31594462602216,-0.25524502465087506&d=51.518474649463556,0.23059147517381098&d=51.420458441661246,-0.6135849395966448&d=51.51705701747482,-0.4344109397108153&d=51.71426415785764,0.049913849616848506&d=51.33332383864823,0.17538644749004112&d=51.498848451580436,-0.09080181378309472&d=51.401728192664905,-0.6158024896257578&d=51.668142147927504,0.331872172755952&d=51.344636081424476,0.311816846326446&d=51.300214659177634,0.030183129540315184&d=51.49571469975512,0.01491968338723226&d=51.68196079207427,-0.14098957500363818&d=51.714803163243644,-0.05784662257233284&d=51.247725473874524,0.1589344211378708&d=51.68309194461323,-0.4015883309615145&d=51.325180482029424,-0.003804003265917774&d=51.691173922935114,-0.11284472408563047&d=51.68457994660444,0.03618016952732479&d=51.23699468003552,-0.3473558079977291&d=51.31893425177827,0.2692938959529245&d=51.2880652305459,-0.2273311646990875";

        GHMatrixRequest matrixRequest = parseRawMatrix(rawMatrix);


        //request.setAlgorithm(Parameters.Algorithms.DIJKSTRA_BI);

        Profile carProfile = new Profile("car");
        carProfile.setTurnCosts(true);
        CHProfile chCarProfile = new CHProfile("car");

        List<Profile> profiles = new ArrayList<>();
        profiles.add(carProfile);

        List<CHProfile> chProfiles = new ArrayList<>();
        chProfiles.add(chCarProfile);

        GraphHopperConfig config = new GraphHopperConfig();
        config.setProfiles(profiles);
        config.setCHProfiles(chProfiles);


        GraphHopper gh = new GraphHopper()
                .setGraphHopperLocation("/home/jp.lopez/maps/matrix/uk/")
                .setOSMFile("/home/jp.lopez/maps/osm/uk.osm.pbf")
                .init(config)
                .setGraphHopperLocation("/home/jp.lopez/maps/matrix/uk/")
                .setOSMFile("/home/jp.lopez/maps/osm/uk.osm.pbf")
                .importOrLoad();


        GHMatrixResponse matrix = gh.matrix(matrixRequest);
        GHMatrixResponse matrix2 = gh.matrix(matrixRequest);
        GHMatrixResponse matrix3 = gh.matrix(matrixRequest);
        //System.out.println(matrix.getMatrix());
        int errors = 0;

        int sourceIdx = 0;

        for (GHPoint source : matrixRequest.getOrigins()) {
            int targetIdx = 0;
            for (GHPoint destiny : matrixRequest.getDestinations()) {

                List<GHPoint> points = new ArrayList<>();
                points.add(source);
                points.add(destiny);

                GHRequest request = new GHRequest().setProfile("car").setPoints(points);
                //request.setAlgorithm(Parameters.Algorithms.DIJKSTRA_BI);

                GHResponse response = gh.route(request);

                double diffDistance = Math.round(response.getBest().getDistance() - matrix.getMatrix().getDistance(sourceIdx, targetIdx));
                double diffTime = Math.round(response.getBest().getTime() - matrix.getMatrix().getTime(sourceIdx, targetIdx));


                if(diffDistance > 0 || diffTime > 1){
                    System.out.println("");
                    System.out.println("++++++++++++++++++++++++++++++++++++++++++");
                    System.out.println(points);
                    System.out.println("Distance: " + diffDistance + " GH: " + response.getBest().getDistance() + " Matrix: " + matrix.getMatrix().getDistance(sourceIdx, targetIdx));
                    System.out.println("Time: " + diffTime + " GH: " + response.getBest().getTime() + " Matrix: " + matrix.getMatrix().getTime(sourceIdx, targetIdx));
                    errors++;
                }

                targetIdx++;
            }
            sourceIdx++;

        }

        System.out.println("Total errors:" + errors);
    }
}