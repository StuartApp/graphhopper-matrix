package com.graphhopper.routing.matrix;

import com.graphhopper.GHRequest;
import com.graphhopper.GHResponse;
import com.graphhopper.GraphHopper;
import com.graphhopper.GraphHopperConfig;
import com.graphhopper.config.CHProfile;
import com.graphhopper.config.Profile;
import com.graphhopper.util.shapes.GHPoint;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.ThreadLocalRandom;

public class TestMatrix {

    public static GHPoint generateRandomLocation(GHPoint origin) {

        double lat = ThreadLocalRandom.current().nextDouble(origin.lat, origin.lat + 0.01);
        double lon = ThreadLocalRandom.current().nextDouble(origin.lon, origin.lon + 0.01);

        return new GHPoint(lat, lon);
    }

    public static void main(String[] args) {

        long test = ((long) Integer.MAX_VALUE) << 1;


        double [][] sourcesX = {{51.47007854071371,-0.42549244148144816},{51.49704500912419,-0.37012717507185655},{51.462429138162435,-0.3800959203933877},{51.44191130506251,-0.3181369491012549},{51.465364778601156,-0.29565067647762444},{51.445143330510284,-0.29825095109099437},{51.40736213907309,-0.279431969355993},{51.401911662732765,-0.2507231543535525},{51.39002125650985,-0.3007672373071504},{51.37532596072793,-0.2750789448009482},{51.33137745311503,-0.265757821288475},{51.327936132793546,-0.22693758287455326},{51.339264884646546,-0.16451545627743785},{51.371859648724964,-0.15695336298185228},{51.3738825144407,-0.10586601290953604},{51.41633084486259,-0.11402954572338453},{51.40466553496775,-0.08784210595265547},{51.40111338199651,-0.01709908572541127},{51.40956906254554,0.0021104197520251055},{51.40060085353677,0.07144796361238631},{51.42177092298316,0.08755479846347408},{51.427133446694455,0.12279899086588052},{51.46347953847043,0.14886074230465676},{51.434106781206495,0.19483645020618348},{51.469188396714145,0.1926643946699101},{51.491045726658164,0.14781849901051058},{51.504011848813356,0.14167517686900655},{51.54384908483136,0.11034682321164857},{51.57639491661139,0.14569559673165922},{51.59516352756188,0.11680710289239167},{51.59466841475814,0.08827242136582238},{51.611067882267925,0.13491543897472377},{51.59271369975858,0.16469906203277382},{51.60720862689148,0.22942580738841664},{51.58246377342179,0.2513783320836106},{51.551388856153515,0.25787975429849125},{51.58811834943656,0.259991402383635},{51.57251205957004,0.23948051240029722},{51.53305654775921,0.23571162211448338},{51.5373262833455,0.23833701478397798},{51.57927000499445,0.2385125326590171},{51.58159101715489,0.23096564044415635},{51.59590455798567,0.16858476851352303},{51.608018423332446,0.09967093658010553},{51.60368868500846,0.09573056451804561},{51.60556589883968,0.02692186847635077},{51.57314850348242,0.01221885781882575},{51.55781984835683,0.02465394954791185},{51.53775489539934,-0.009406161437813235},{51.552181470393585,-0.00829160571709206},{51.56642823371482,-0.011134078077743456},{51.58801849204046,-0.0691789327708377},{51.61659651666154,-0.09797066772562879},{51.599531379319565,-0.12379255618574972},{51.597325207170734,-0.06413990897795294},{51.58846681435512,-0.08431145726952587},{51.595544519880974,-0.1364964763916579},{51.56254620158747,-0.17904610566637702},{51.54843858714253,-0.148480715516968},{51.52363693911944,-0.1116164973748034},{51.51081242341361,-0.11877533840318363},{51.47215873640046,-0.08653264330894465},{51.50331482053064,-0.08423948770926454},{51.51033394464497,-0.046641590404050644},{51.52392750957763,-0.05566373621907031},{51.492934921796135,-0.004710624159548466},{51.46346344566821,0.01317945028456052},{51.41867890254299,0.01085193244320245},{51.3955119547336,-0.0070786791793909275},{51.36401807530685,0.033200263202059155},{51.388307336940045,0.092712031818141},{51.42203051232042,0.101779894585222},{51.44461942470248,0.09062920040718367},{51.46579459775205,0.031243614277375212},{51.47457559033254,0.007790060475519547},{51.488114861995044,-0.01917817205676092},{51.47238901357883,0.00965822404040476},{51.49481745786986,0.011810164983767867},{51.51268208145342,0.0726861022002859},{51.50274148176223,0.13001109041143377},{51.516433977520066,0.15761354366094996},{51.50904732300328,0.13579447350625323},{51.52390080313837,0.14681852531410433},{51.531947005731936,0.10625984053229456},{51.53636513399229,0.06089913253584279},{51.52211057209215,0.1233001326352946},{51.53583345382333,0.10864036471985439},{51.5481158727317,0.07001255070763472},{51.54961271293011,0.03566643671207902},{51.50961050878862,0.004180158598510249},{51.477571273787696,-0.034567502331959286},{51.449102290336185,-0.060853448717976356},{51.40963763661198,-0.05412425533306888},{51.40644536827134,-0.02472785121065072},{51.41189070966008,-0.0872957146778041},{51.41135699727809,-0.03325335007291458},{51.37052063609288,-0.047825620750152},{51.33311723966032,-0.02069537107855764},{51.36461645394568,-0.044379279311742},{51.374065999595324,-0.036726837665536374}};
        double[][] targetsX = {{51.52363693911944,-0.1116164973748034},{51.54843858714253,-0.148480715516968},{51.51081242341361,-0.11877533840318363},{51.47215873640046,-0.08653264330894465},{51.50331482053064,-0.08423948770926454},{51.51033394464497,-0.046641590404050644},{51.53775489539934,-0.009406161437813235},{51.55781984835683,0.02465394954791185},{51.57314850348242,0.01221885781882575},{51.552181470393585,-0.00829160571709206},{51.56642823371482,-0.011134078077743456},{51.58801849204046,-0.0691789327708377},{51.61659651666154,-0.09797066772562879},{51.599531379319565,-0.12379255618574972},{51.597325207170734,-0.06413990897795294},{51.58846681435512,-0.08431145726952587},{51.595544519880974,-0.1364964763916579},{51.56254620158747,-0.17904610566637702},{51.58205850697597,-0.23973917206240042},{51.59056977618459,-0.2358555312655807},{51.55857972627867,-0.2719596450317946},{51.523635096365545,-0.27387624379465064},{51.50386722940413,-0.2512117937813769},{51.475041833861525,-0.21162158889807045},{51.432554857570004,-0.1963572920611229},{51.44629303122715,-0.21045202679013272},{51.41762167324979,-0.15931595424930334},{51.41633084486259,-0.11402954572338453},{51.40466553496775,-0.08784210595265547},{51.40111338199651,-0.01709908572541127},{51.40956906254554,0.0021104197520251055},{51.40060085353677,0.07144796361238631},{51.42177092298316,0.08755479846347408},{51.427133446694455,0.12279899086588052},{51.46347953847043,0.14886074230465676},{51.434106781206495,0.19483645020618348},{51.469188396714145,0.1926643946699101},{51.491045726658164,0.14781849901051058},{51.504011848813356,0.14167517686900655},{51.54384908483136,0.11034682321164857},{51.57639491661139,0.14569559673165922},{51.59516352756188,0.11680710289239167},{51.59466841475814,0.08827242136582238},{51.611067882267925,0.13491543897472377},{51.59271369975858,0.16469906203277382},{51.60720862689148,0.22942580738841664},{51.58246377342179,0.2513783320836106},{51.551388856153515,0.25787975429849125},{51.58811834943656,0.259991402383635},{51.57251205957004,0.23948051240029722},{51.53305654775921,0.23571162211448338},{51.5373262833455,0.23833701478397798},{51.57927000499445,0.2385125326590171},{51.58159101715489,0.23096564044415635},{51.59590455798567,0.16858476851352303},{51.608018423332446,0.09967093658010553},{51.60368868500846,0.09573056451804561},{51.60556589883968,0.02692186847635077},{51.62514309220278,0.008090766634909303},{51.6228258837778,0.02401038588622836},{51.625326139391824,0.0037073228334420084},{51.646036085036556,-0.015088814090546469},{51.68963428856998,-0.020519874138845443},{51.71827100726111,-0.022258176756886017},{51.691619441795844,-0.03538178202042795},{51.72260677756651,-0.060787476359197325},{51.73163497964684,-0.02757411136793149},{51.70714804042967,-0.0174996910995634},{51.68750921247684,-0.05976706016868441},{51.66472045374845,-0.05378218942740807},{51.64117160817108,-0.03091682580721712},{51.61620435285984,-0.05646159323356761},{51.57616110821458,-0.030210081567485933},{51.554674864000674,-0.05358964025791141},{51.52392750957763,-0.05566373621907031},{51.492934921796135,-0.004710624159548466},{51.46346344566821,0.01317945028456052},{51.41867890254299,0.01085193244320245},{51.3955119547336,-0.0070786791793909275},{51.36401807530685,0.033200263202059155},{51.388307336940045,0.092712031818141},{51.42203051232042,0.101779894585222},{51.44461942470248,0.09062920040718367},{51.46579459775205,0.031243614277375212},{51.47457559033254,0.007790060475519547},{51.488114861995044,-0.01917817205676092},{51.47238901357883,0.00965822404040476},{51.49481745786986,0.011810164983767867},{51.51268208145342,0.0726861022002859},{51.50274148176223,0.13001109041143377},{51.516433977520066,0.15761354366094996},{51.50904732300328,0.13579447350625323},{51.52390080313837,0.14681852531410433},{51.531947005731936,0.10625984053229456},{51.53636513399229,0.06089913253584279},{51.52211057209215,0.1233001326352946},{51.53583345382333,0.10864036471985439},{51.5481158727317,0.07001255070763472},{51.54961271293011,0.03566643671207902},{51.50961050878862,0.004180158598510249}};
        //System.out.println(test);
        //System.out.println(Integer.MAX_VALUE);
        //System.exit(1);


        //try {
        //    System.in.read();
        //} catch(Exception e) {
        //    System.out.println("eo");
        //}

        //UK
        //GHPoint from = new GHPoint(51.472,-0.129);
        //GHPoint to = new GHPoint(51.501,-0.100);


        List<GHPoint> origins = new ArrayList<>();

        Arrays.stream(sourcesX).forEach(x -> origins.add(new GHPoint(x[0], x[1])));
        /*
        origins.add(new GHPoint(51.68140061533052,-0.044214058132244625));
        origins.add(new GHPoint(51.41945963257834,0.09509579022414802));
        origins.add(new GHPoint(51.60577792916658,0.1785051984029849));
        origins.add(new GHPoint(51.49889748241755,0.3382430857368515));
        origins.add(new GHPoint(51.374908237160454,-0.1244222250478307));
        origins.add(new GHPoint(51.567423748477296,0.19147795934903708));
        origins.add(new GHPoint(51.48452339437413,-0.35459503988973623));
        origins.add(new GHPoint(51.40073990147456,-0.2987860676505441));
        origins.add(new GHPoint(51.40713333252742,-0.3858343714606207));
        origins.add(new GHPoint(51.52777082401176,-0.43244816152258947));
        origins.add(new GHPoint(51.44556658422505,0.21464434297642518));
        origins.add(new GHPoint(51.63445852924358,-0.07935492121099595));
        origins.add(new GHPoint(51.47557398939406,-0.24846569194988602));
        origins.add(new GHPoint(51.480059120536424,-0.47720479075051847));
        origins.add(new GHPoint(51.548542269940356,-0.12981291923740262));
        origins.add(new GHPoint(51.481584097207175,0.3576428785659095));
        origins.add(new GHPoint(51.34386271204732,0.1065016905306784));
        origins.add(new GHPoint(51.574063964266706,0.2404358947452625));
        origins.add(new GHPoint(51.62763208985067,-0.05461613722835714));
        origins.add(new GHPoint(51.46849298224116,0.15960770678027011));
        origins.add(new GHPoint(51.34354009587719,0.016282045756049527));
        origins.add(new GHPoint(51.33127292220024,-0.2600695615812042));
        origins.add(new GHPoint(51.4148032237836,-0.0816899333501135));
        origins.add(new GHPoint(51.56127398650828,-0.5150265194232526));
        origins.add(new GHPoint(51.62685152525985,-0.3976761908038831));
         */

        List<GHPoint> targets = new ArrayList<>();
        Arrays.stream(targetsX).forEach(x -> targets.add(new GHPoint(x[0], x[1])));
        /*
        targets.add(new GHPoint(51.41945963257834,0.09509579022414802));
        targets.add(new GHPoint(51.68140061533052,-0.044214058132244625));
        targets.add(new GHPoint(51.60577792916658,0.1785051984029849));
        targets.add(new GHPoint(51.49889748241755,0.3382430857368515));
        targets.add(new GHPoint(51.374908237160454,-0.1244222250478307));
        targets.add(new GHPoint(51.567423748477296,0.19147795934903708));
        targets.add(new GHPoint(51.48452339437413,-0.35459503988973623));
        targets.add(new GHPoint(51.40073990147456,-0.2987860676505441));
        targets.add(new GHPoint(51.40713333252742,-0.3858343714606207));
        targets.add(new GHPoint(51.52777082401176,-0.43244816152258947));
        targets.add(new GHPoint(51.44556658422505,0.21464434297642518));
        targets.add(new GHPoint(51.63445852924358,-0.07935492121099595));
        targets.add(new GHPoint(51.47557398939406,-0.24846569194988602));
        targets.add(new GHPoint(51.480059120536424,-0.47720479075051847));
        targets.add(new GHPoint(51.548542269940356,-0.12981291923740262));
        targets.add(new GHPoint(51.481584097207175,0.3576428785659095));
        targets.add(new GHPoint(51.34386271204732,0.1065016905306784));
        targets.add(new GHPoint(51.574063964266706,0.2404358947452625));
        targets.add(new GHPoint(51.62763208985067,-0.05461613722835714));
        targets.add(new GHPoint(51.46849298224116,0.15960770678027011));
        targets.add(new GHPoint(51.34354009587719,0.016282045756049527));
        targets.add(new GHPoint(51.33127292220024,-0.2600695615812042));
        targets.add(new GHPoint(51.4148032237836,-0.0816899333501135));
        targets.add(new GHPoint(51.56127398650828,-0.5150265194232526));
        targets.add(new GHPoint(51.62685152525985,-0.3976761908038831));
        */


        //Andorra
        //GHPoint from = new GHPoint(42.51563823109501, 1.520477128586076);
        //GHPoint to = new GHPoint(42.509281169850254, 1.5409253398454361);

        GHPoint from = new GHPoint(42.52268155770159, 1.5270400223312923);
        GHPoint to = new GHPoint(42.51809310570478, 1.5321160685824744);

        GHPoint from2 = new GHPoint(42.52268155770159, 1.5270400223312923);
        GHPoint to2 = new GHPoint(42.49878652482251, 1.5630379943925652);

        GHPoint from3 = new GHPoint(42.52268155770159, 1.5270400223312923);
        GHPoint to3 = new GHPoint(42.5031050925358, 1.5726280934108343);


        //List<GHPoint> origins = new ArrayList<>();
        //origins.add(from);
        //origins.add(from2);
        //origins.add(from3);

        //List<GHPoint> targets = new ArrayList<>();
        //targets.add(to);
        //targets.add(to2);
        //targets.add(to3);

        GHMatrixRequest matrixRequest = new GHMatrixRequest().setProfile("bike");
        matrixRequest.setOrigins(origins);
        matrixRequest.setDestinations(targets);


        //request.setAlgorithm(Parameters.Algorithms.DIJKSTRA_BI);

        Profile carProfile = new Profile("bike");
        carProfile.setTurnCosts(true);
        CHProfile chCarProfile = new CHProfile("bike");

        List<Profile> profiles = new ArrayList<>();
        profiles.add(carProfile);

        List<CHProfile> chProfiles = new ArrayList<>();
        chProfiles.add(chCarProfile);

        GraphHopperConfig config = new GraphHopperConfig();
        config.setProfiles(profiles);
        config.setCHProfiles(chProfiles);


        GraphHopper gh = new GraphHopper()
                .setGraphHopperLocation("/home/jp.lopez/maps/matrix/uk/")
                .setOSMFile("/home/jp.lopez/maps/osm/uk.osm.pbf")
                .init(config)
                .setGraphHopperLocation("/home/jp.lopez/maps/matrix/uk/")
                .setOSMFile("/home/jp.lopez/maps/osm/uk.osm.pbf")
                .importOrLoad();


        //GHResponse response2 = gh.route(request2);

        GHMatrixResponse matrix = gh.matrix(matrixRequest);
        GHMatrixResponse matrix2 = gh.matrix(matrixRequest);
        //GHMatrixResponse matrix3 = gh.matrix(matrixRequest);
        //System.out.println(matrix.getMatrix());
        int errors = 0;

        int sourceIdx = 0;

        for (GHPoint source : origins) {
            int targetIdx = 0;
            for (GHPoint destiny : targets) {


                List<GHPoint> points = new ArrayList<>();
                points.add(source);
                points.add(destiny);

                GHRequest request = new GHRequest().setProfile("bike").setPoints(points);

                GHResponse response = gh.route(request);

                double diffDistance = Math.round(response.getBest().getDistance() - matrix.getMatrix().getDistance(sourceIdx, targetIdx));
                double diffTime = Math.round(response.getBest().getTime() - matrix.getMatrix().getTime(sourceIdx, targetIdx));

                if (diffDistance > 1 || diffTime > 1) {
                    System.out.println("Distance: " + diffDistance + " GH: " + response.getBest().getDistance() + " Matrix: " + matrix.getMatrix().getDistance(sourceIdx, targetIdx));
                    System.out.println("Time: " + diffTime + " GH: " + response.getBest().getTime() + " Matrix: " + matrix.getMatrix().getTime(sourceIdx, targetIdx));
                    errors++;
                }

                targetIdx++;
            }
            sourceIdx++;

        }

        System.out.println("Total errors:" + errors);
    }
}